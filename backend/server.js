const express = require("express");
const mysql = require("mysql2/promise");
const cors = require("cors");
const bodyParser = require("body-parser");
const bcrypt = require("bcrypt");
const saltRounds = 10;

const app = express();
// const PORT = 3001;
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json());

// // Database connection using async/await
// const db = mysql.createPool({
//   // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô pool ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
//   host: "localhost",
//   user: "root",
//   password: "root",
//   database: "testdb",
// });

const db = mysql.createPool({
  // ‡πÉ‡∏ä‡πâ Connection URL ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å Environment Variable
  uri: process.env.DATABASE_URL, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ SSL/TLS ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà TiDB Cloud ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  ssl: {
    rejectUnauthorized: true,
  }, // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ Database/Schema ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  database: "test",
});

// Start the server only after a successful database connection
(async function startServer() {
  try {
    await db.getConnection(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    console.log("‚úÖ Connected to MySQL");
    app.listen(PORT, () => {
      console.log(`üöÄ Server running port ${PORT}`);
      //${PORT}
      // http://localhost:${PORT}
    });
  } catch (err) {
    console.error("‚ùå Database connection failed:", err);
  }
})();

//---
// TiDB data base
// POST /login route (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ async/await ‡πÅ‡∏•‡∏∞ bcrypt)
app.post("/api/login", async (req, res) => {
  const { name, password } = req.body;

  if (!name || !password) {
    return res
      .status(400)
      .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
  }

  try {
    const sql = "SELECT * FROM test.user WHERE name = ?";
    const [results] = await db.query(sql, [name]);

    if (results.length > 0) {
      const user = results[0];
      // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß
      const isMatch = await bcrypt.compare(password, user.password);

      if (isMatch) {
        // ‡∏™‡πà‡∏á role ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô response
        res.json({
          success: true,
          message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          role: user.role,
          user: user,
        });
      } else {
        res.status(401).json({
          success: false,
          message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        });
      }
    } else {
      res
        .status(401)
        .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
  } catch (err) {
    console.error("‚ùå Login error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

/****************************** Local host ************************************/
// app.post("/api/login", async (req, res) => {
//   const { name, password } = req.body;

//   if (!name || !password) {
//     return res
//       .status(400)
//       .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
//   }

//   try {
//     const sql = "SELECT * FROM testdb.user WHERE name = ?";
//     const [results] = await db.query(sql, [name]);

//     if (results.length > 0) {
//       const user = results[0];
//       // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß
//       const isMatch = await bcrypt.compare(password, user.password);

//       if (isMatch) {
//         // ‡∏™‡πà‡∏á role ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô response
//         res.json({
//           success: true,
//           message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
//           role: user.role,
//           user: user,
//         });
//       } else {
//         res.status(401).json({
//           success: false,
//           message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
//         });
//       }
//     } else {
//       res
//         .status(401)
//         .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
//     }
//   } catch (err) {
//     console.error("‚ùå Login error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
//////////////////// TiDB data base //////////////////////
app.post("/api/getuser", async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á)
    const sql = "SELECT * FROM test.user ORDER BY id DESC";
    const [results] = await db.query(sql);

    // *** ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
    res.json({
      success: true,
      users: results, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏µ‡∏¢‡πå 'users'
    });
  } catch (err) {
    console.error("‚ùå Get user list error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

/******************* local host *******************/
// app.post("/api/getuser", async (req, res) => {
//   try {
//     // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á)
//     const sql = "SELECT * FROM testdb.user ORDER BY id DESC";
//     const [results] = await db.query(sql);

//     // *** ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
//     res.json({
//       success: true,
//       users: results, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏µ‡∏¢‡πå 'users'
//     });
//   } catch (err) {
//     console.error("‚ùå Get user list error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

////////////////////// TiDB data base ///////////////////////
app.patch("/api/updateProfileByAdmin/:name", async (req, res) => {
  const oldName = req.params.name;
  const { newName, newPassword, newRole } = req.body;

  if (!newName && !newPassword && !newRole) {
    return res
      .status(400)
      .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
  }

  try {
    const updates = [];
    const params = [];

    // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (newName && newName !== oldName) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const checkSql = "SELECT name FROM test.user WHERE name = ?";
      const [existingUsers] = await db.query(checkSql, [newName]);
      if (existingUsers.length > 0) {
        return res
          .status(409)
          .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
      }
      updates.push("name = ?");
      params.push(newName);
    }

    // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà)
    if (newPassword) {
      if (newPassword.length < 6) {
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        return res.status(400).json({
          success: false,
          message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
        });
      }
      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ bcrypt
      const hashedPassword = await bcrypt.hash(newPassword, saltRounds);
      updates.push("password = ?");
      params.push(hashedPassword);
    }

    // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    if (newRole) {
      if (newRole !== "admin" && newRole !== "user") {
        return res
          .status(400)
          .json({ success: false, message: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
      updates.push("role = ?");
      params.push(newRole);
    }

    // ‡∏£‡∏ß‡∏° SQL Query ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const sql = `UPDATE test.user SET ${updates.join(
      ", "
    )}, update_at = CURRENT_TIMESTAMP() WHERE name = ?`;

    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° (oldName) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï name = ? ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô params ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    params.push(oldName);

    const [results] = await db.query(sql, params);

    if (results.affectedRows > 0) {
      res.json({ success: true, message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } else {
      res
        .status(404)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
    }
  } catch (error) {
    console.error("‚ùå Admin update profile error:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
  }
});

///////////////////// local host //////////////////////////////
// app.patch("/api/updateProfileByAdmin/:name", async (req, res) => {
//   const oldName = req.params.name;
//   const { newName, newPassword, newRole } = req.body;

//   if (!newName && !newPassword && !newRole) {
//     return res
//       .status(400)
//       .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
//   }

//   try {
//     const updates = [];
//     const params = [];

//     // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//     if (newName && newName !== oldName) {
//       // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//       const checkSql = "SELECT name FROM testdb.user WHERE name = ?";
//       const [existingUsers] = await db.query(checkSql, [newName]);
//       if (existingUsers.length > 0) {
//         return res
//           .status(409)
//           .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
//       }
//       updates.push("name = ?");
//       params.push(newName);
//     }

//     // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà)
//     if (newPassword) {
//       if (newPassword.length < 6) {
//         // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
//         return res.status(400).json({
//           success: false,
//           message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
//         });
//       }
//       // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ bcrypt
//       const hashedPassword = await bcrypt.hash(newPassword, saltRounds);
//       updates.push("password = ?");
//       params.push(hashedPassword);
//     }

//     // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
//     if (newRole) {
//       if (newRole !== "admin" && newRole !== "user") {
//         return res
//           .status(400)
//           .json({ success: false, message: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
//       }
//       updates.push("role = ?");
//       params.push(newRole);
//     }

//     // ‡∏£‡∏ß‡∏° SQL Query ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
//     const sql = `UPDATE testdb.user SET ${updates.join(", ")} WHERE name = ?`;

//     // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° (oldName) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
//     // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï name = ? ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô params ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
//     params.push(oldName);

//     const [results] = await db.query(sql, params);

//     if (results.affectedRows > 0) {
//       res.json({ success: true, message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
//     } else {
//       res
//         .status(404)
//         .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
//     }
//   } catch (error) {
//     console.error("‚ùå Admin update profile error:", error);
//     res.status(500).json({
//       success: false,
//       message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
//     });
//   }
// });

//////////////////// TiDB data base //////////////////////
app.delete("/api/deleteuser/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const sql = "DELETE FROM test.user WHERE id = ?";
    const [results] = await db.query(sql, [id]);

    if (results.affectedRows > 0) {
      res.json({ success: true, message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } else {
      res
        .status(404)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID ‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }
  } catch (error) {
    console.error("‚ùå Delete user error:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
  }
});

///////////////// local host ////////////////////
// app.delete("/api/deleteuser/:id", async (req, res) => {
//   const { id } = req.params;

//   try {
//     const sql = "DELETE FROM testdb.user WHERE id = ?";
//     const [results] = await db.query(sql, [id]);

//     if (results.affectedRows > 0) {
//       res.json({ success: true, message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
//     } else {
//       res
//         .status(404)
//         .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID ‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
//     }
//   } catch (error) {
//     console.error("‚ùå Delete user error:", error);
//     res.status(500).json({
//       success: false,
//       message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
//     });
//   }
// });

//---
////////////TiDB data base ///////////////////
// POST /api/register (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
app.post("/api/register", async (req, res) => {
  const { name, password, role } = req.body;

  if (!name || !password || !role) {
    return res.status(400).json({
      success: false,
      message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏",
    });
  }

  try {
    const [maxIdResult] = await db.query(
      "SELECT MAX(id) AS max_id FROM test.user"
    );
    const newId = (maxIdResult[0].max_id || 0) + 1;
    const checkSql = "SELECT name FROM test.user WHERE name = ?";
    const [existingUsers] = await db.query(checkSql, [name]);

    if (existingUsers.length > 0) {
      return res
        .status(409)
        .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const hashedPassword = await bcrypt.hash(password, saltRounds);
    const insertSql =
      "INSERT INTO test.user (id, name, password, role, create_at, update_at) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP())";
    const [results] = await db.query(insertSql, [
      newId,
      name, 
      hashedPassword, 
      role
    ]);

    res.json({
      success: true,
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      userID: newId,
    });
  } catch (error) {
    console.error("‚ùå Registration error:", error);
    return res.status(500).json({ success: false, message: "Database error" });
  }
});

//////////////////////local host ////////////////////////////////
// app.post("/api/register", async (req, res) => {
//   const { name, password, role } = req.body;

//   if (!name || !password || !role) {
//     return res.status(400).json({
//       success: false,
//       message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏",
//     });
//   }

//   try {
//     const checkSql = "SELECT name FROM testdb.user WHERE name = ?";
//     const [existingUsers] = await db.query(checkSql, [name]);

//     if (existingUsers.length > 0) {
//       return res
//         .status(409)
//         .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
//     }

//     const hashedPassword = await bcrypt.hash(password, saltRounds);

//     const insertSql =
//       "INSERT INTO testdb.user (name, password, role) VALUES (?, ?, ?)";
//     await db.query(insertSql, [name, hashedPassword, role]);

//     res.json({
//       success: true,
//       message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
//     });
//   } catch (error) {
//     console.error("‚ùå Registration error:", error);
//     return res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---

// ‡∏™‡πà‡∏ß‡∏ô API ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å db.query(...) ‡πÄ‡∏õ‡πá‡∏ô await db.query(...) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
//////////////////////local host/////////////////////
// app.post("/api/order", async (req, res) => {
//   const { tablenum, listorder, qty, price, total_price } = req.body;
//   if (!tablenum || !listorder || !qty) {
//     return res.status(400).json({
//       success: false,
//       message: "tableNumber, listOrder, qty required",
//     });
//   }
//   try {
//     const sql =
//       "INSERT INTO testdb.listorder (tablenum, listorder, qty, price, total_price, status) VALUES (?, ?, ?, ?, ?, 'pending')";
//     const [results] = await db.query(sql, [
//       tablenum,
//       listorder,
//       qty,
//       price,
//       total_price,
//     ]);
//     res.json({
//       success: true,
//       message: "Order added successfully",
//       orderId: results.insertId,
//     });
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//////////////////TiDB data base /////////////////////
app.post("/api/order", async (req, res) => {
  const { tablenum, listorder, qty, price, total_price } = req.body;
  if (!tablenum || !listorder || !qty) {
    return res.status(400).json({
      success: false,
      message: "tableNumber, listOrder, qty required",
    });
  }
  try {
    // 1. ‡∏´‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢)
    const [maxIdResult] = await db.query(
      "SELECT MAX(id) AS max_id FROM test.listorder"
    );
    const newId = (maxIdResult[0].max_id || 0) + 1; // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL Query: ‡πÄ‡∏û‡∏¥‡πà‡∏° 'id' ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° '?' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ id ‡πÉ‡∏´‡∏°‡πà
    const sql =
      "INSERT INTO test.listorder (id, tablenum, listorder, qty, price, total_price, status,update_status,create_at,update_at) VALUES (?, ?, ?, ?, ?, ?, 'pending',CURRENT_TIMESTAMP(),NOW(),CURRENT_TIMESTAMP())"; // 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Array ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤: ‡πÄ‡∏û‡∏¥‡πà‡∏° newId ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
    const [results] = await db.query(sql, [
      newId, // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ ID ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
      tablenum,
      listorder,
      qty,
      price,
      total_price,
    ]);
    res.json({
      success: true,
      message: "Order added successfully",
      orderId: newId, // ‡πÉ‡∏ä‡πâ newId ‡πÅ‡∏ó‡∏ô results.insertId
    });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

////////////////////////TiDB data base////////////////////
app.patch("/api/completeOrder", async (req, res) => {
  const { id } = req.body;

  try {
    // --- 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ---
    const updateSql = `
            UPDATE listorder 
            SET status = 'completed', update_status = CURRENT_TIMESTAMP() 
            WHERE id = ?;
        `;
    const [updateResult] = await db.query(updateSql, [id]);

    if (updateResult.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
      });
    }

    // --- 2. ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞ (tablenum) ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ---
    const getTablenumSql = `
            SELECT tablenum FROM listorder WHERE id = ?;
        `;
    const [tablenumRows] = await db.query(getTablenumSql, [id]);

    if (tablenumRows.length === 0) {
      // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      return res.json({
        success: true,
        message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞",
      });
    }

    const tablenum = tablenumRows[0].tablenum;

    // --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏±‡πâ‡∏ô ---
    const checkRemainingSql = `
            SELECT COUNT(id) AS remainingOrders 
            FROM listorder 
            WHERE tablenum = ? AND status != 'completed' ;
        `;
    // *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° status != 'paid' ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏π‡∏Å mark ‡∏ß‡πà‡∏≤ Paid ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô*
    // *‡∏ñ‡πâ‡∏≤ Logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 'completed' ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ*

    const [remainingRows] = await db.query(checkRemainingSql, [tablenum]);
    const remainingCount = remainingRows[0].remainingOrders;

    let clearGuestSession = false;
    if (remainingCount === 0) {
      // 4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πâ‡∏≤‡∏á Session
      clearGuestSession = true;
    }

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
    res.json({
      success: true,
      message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      tablenum: tablenum, // ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      clearGuestSession: clearGuestSession, // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö localStorage
    });
  } catch (err) {
    console.error("‚ùå Error completing order:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

////////////////////////local host////////////////////
// app.patch("/api/completeOrder", async (req, res) => {
//   const { id } = req.body;

//   try {
//     // --- 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ---
//     const updateSql = `
//             UPDATE listorder
//             SET status = 'completed', update_status = CURRENT_TIMESTAMP()
//             WHERE id = ?;
//         `;
//     const [updateResult] = await db.query(updateSql, [id]);

//     if (updateResult.affectedRows === 0) {
//       return res.status(404).json({
//         success: false,
//         message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
//       });
//     }

//     // --- 2. ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞ (tablenum) ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ---
//     const getTablenumSql = `
//             SELECT tablenum FROM listorder WHERE id = ?;
//         `;
//     const [tablenumRows] = await db.query(getTablenumSql, [id]);

//     if (tablenumRows.length === 0) {
//       // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
//       return res.json({
//         success: true,
//         message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞",
//       });
//     }

//     const tablenum = tablenumRows[0].tablenum;

//     // --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏±‡πâ‡∏ô ---
//     const checkRemainingSql = `
//             SELECT COUNT(id) AS remainingOrders
//             FROM listorder
//             WHERE tablenum = ? AND status != 'completed' ;
//         `;
//     // *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° status != 'paid' ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏π‡∏Å mark ‡∏ß‡πà‡∏≤ Paid ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô*
//     // *‡∏ñ‡πâ‡∏≤ Logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 'completed' ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ*

//     const [remainingRows] = await db.query(checkRemainingSql, [tablenum]);
//     const remainingCount = remainingRows[0].remainingOrders;

//     let clearGuestSession = false;
//     if (remainingCount === 0) {
//       // 4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πâ‡∏≤‡∏á Session
//       clearGuestSession = true;
//     }

//     // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
//     res.json({
//       success: true,
//       message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
//       tablenum: tablenum, // ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
//       clearGuestSession: clearGuestSession, // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö localStorage
//     });
//   } catch (err) {
//     console.error("‚ùå Error completing order:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

app.patch("/api/doneOrder", async (req, res) => {
  const { id } = req.body;

  try {
    // --- 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ---
    const updateSql = `
            UPDATE listorder 
            SET status = 'done', update_status = CURRENT_TIMESTAMP()
            WHERE id = ?;
        `;
    const [updateResult] = await db.query(updateSql, [id]);

    if (updateResult.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
      });
    }

    // --- 2. ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞ (tablenum) ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ---
    const getTablenumSql = `
            SELECT tablenum FROM listorder WHERE id = ?;
        `;
    const [tablenumRows] = await db.query(getTablenumSql, [id]);

    if (tablenumRows.length === 0) {
      // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      return res.json({
        success: true,
        message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞",
      });
    }

    const tablenum = tablenumRows[0].tablenum;

    // --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏±‡πâ‡∏ô ---
    const checkRemainingSql = `
            SELECT COUNT(id) AS remainingOrders 
            FROM listorder 
            WHERE tablenum = ? AND status = 'pending' ;
        `;
    // *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° status != 'paid' ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏π‡∏Å mark ‡∏ß‡πà‡∏≤ Paid ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô*
    // *‡∏ñ‡πâ‡∏≤ Logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 'completed' ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ*

    const [remainingRows] = await db.query(checkRemainingSql, [tablenum]);
    const remainingCount = remainingRows[0].remainingOrders;

    let clearGuestSession = false;
    if (remainingCount === 0) {
      // 4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πâ‡∏≤‡∏á Session
      clearGuestSession = true;
    }

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
    res.json({
      success: true,
      message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      tablenum: tablenum, // ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      clearGuestSession: clearGuestSession, // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö localStorage
    });
  } catch (err) {
    console.error("‚ùå Error completing order:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---
//////////////////////TiDB data base//////////////////
app.post("/api/getorder", async (req, res) => {
  try {
    const sql = "SELECT * FROM test.listorder ORDER BY id DESC LIMIT 1000";
    const [results] = await db.query(sql);
    res.json({ success: true, orders: results });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

////////////////////local host///////////////////////
// app.post("/api/getorder", async (req, res) => {
//   try {
//     const sql = "SELECT * FROM testdb.listorder ORDER BY id DESC LIMIT 1000";
//     const [results] = await db.query(sql);
//     res.json({ success: true, orders: results });
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
///////////////////TiDB data base///////////////////////
app.patch("/api/updateOrder", async (req, res) => {
  const { id, tablenum, listorder, qty, price, total_price } = req.body;
  if (!id || !tablenum || !listorder || !qty) {
    return res.status(400).json({
      success: false,
      message: "id, tableNumber, listOrder, qty required",
    });
  }
  try {
    const sql =
      "UPDATE test.listorder SET tablenum = ?, listorder = ?, qty = ?, price = ?, total_price = ?, update_at = CURRENT_TIMESTAMP() WHERE id = ?";
    const [results] = await db.query(sql, [
      tablenum,
      listorder,
      qty,
      price,
      total_price,
      id,
    ]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Update order successfully" });
    } else {
      res.status(404).json({ success: false, message: "Order not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//////////////////////local host/////////////////////////
// app.patch("/api/updateOrder", async (req, res) => {
//   const { id, tablenum, listorder, qty, price, total_price } = req.body;
//   if (!id || !tablenum || !listorder || !qty) {
//     return res.status(400).json({
//       success: false,
//       message: "id, tableNumber, listOrder, qty required",
//     });
//   }
//   try {
//     const sql =
//       "UPDATE testdb.listorder SET tablenum = ?, listorder = ?, qty = ?, price = ?, total_price = ? WHERE id = ?";
//     const [results] = await db.query(sql, [
//       tablenum,
//       listorder,
//       qty,
//       price,
//       total_price,
//       id,
//     ]);
//     if (results.affectedRows > 0) {
//       res.json({ success: true, message: "Update order successfully" });
//     } else {
//       res.status(404).json({ success: false, message: "Order not found" });
//     }
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
//////////////////////TiDB data base///////////////////
app.delete("/api/deleteOrder/:id", async (req, res) => {
  const { id } = req.params;
  if (!id) {
    return res.status(400).json({ success: false, message: "id required" });
  }
  try {
    const sql = "DELETE FROM test.listorder WHERE id = ?";
    const [results] = await db.query(sql, [id]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Delete order successfully" });
    } else {
      res.status(404).json({ success: false, message: "Order not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

/////////////////////local host/////////////////////////
// app.delete("/api/deleteOrder/:id", async (req, res) => {
//   const { id } = req.params;
//   if (!id) {
//     return res.status(400).json({ success: false, message: "id required" });
//   }
//   try {
//     const sql = "DELETE FROM testdb.listorder WHERE id = ?";
//     const [results] = await db.query(sql, [id]);
//     if (results.affectedRows > 0) {
//       res.json({ success: true, message: "Delete order successfully" });
//     } else {
//       res.status(404).json({ success: false, message: "Order not found" });
//     }
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
////////////////////TiDB data base////////////////////
app.post("/api/getmenu", async (req, res) => {
  try {
    const sql = "SELECT * FROM test.masterorder ORDER BY id DESC LIMIT 1000";
    const [results] = await db.query(sql);
    res.json({ success: true, menu: results });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

/////////////////////local host/////////////////////////
// app.post("/api/getmenu", async (req, res) => {
//   try {
//     const sql = "SELECT * FROM testdb.masterorder ORDER BY id DESC LIMIT 1000";
//     const [results] = await db.query(sql);
//     res.json({ success: true, menu: results });
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
//////////////////////TiDB database////////////////
app.post("/api/addmenu", async (req, res) => {
  const { menuname, price } = req.body;
  if (!menuname || !price) {
    return res
      .status(400)
      .json({ success: false, message: "menuname, price required" });
  }
  try {
    const [maxIdResult] = await db.query(
      "SELECT MAX(id) AS max_id FROM test.masterorder"
    );
    const newId = (maxIdResult[0].max_id || 0) + 1;

    const sql =
      "INSERT INTO test.masterorder (id, ordername, price, create_at, update_at) VALUES (?, ?, ?, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP())";
    const [results] = await db.query(sql, [newId, menuname, price]);
    res.json({
      success: true,
      message: "Menu added successfully",
      orderId: results.insertId,
    });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//////////////////local host//////////////////
// app.post("/api/addmenu", async (req, res) => {
//   const { menuname, price } = req.body;
//   if (!menuname || !price) {
//     return res
//       .status(400)
//       .json({ success: false, message: "menuname, price required" });
//   }
//   try {
//     const sql =
//       "INSERT INTO testdb.masterorder (ordername, price) VALUES (?, ?)";
//     const [results] = await db.query(sql, [menuname, price]);
//     res.json({
//       success: true,
//       message: "Menu added successfully",
//       orderId: results.insertId,
//     });
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
//////////////////////TiDB data base//////////////////////
app.patch("/api/updatemenu", async (req, res) => {
  const { id, menuname, price } = req.body;
  if (!id || !menuname || !price) {
    return res
      .status(400)
      .json({ success: false, message: "id, menuname, price required" });
  }
  try {
    const sql =
      "UPDATE test.masterorder SET ordername = ?, price = ?, update_at = CURRENT_TIMESTAMP() WHERE id = ?";
    const [results] = await db.query(sql, [menuname, price, id]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Update menu successfully" });
    } else {
      res.status(404).json({ success: false, message: "Menu not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

/////////////////////local host///////////////////////
// app.patch("/api/updatemenu", async (req, res) => {
//   const { id, menuname, price } = req.body;
//   if (!id || !menuname || !price) {
//     return res
//       .status(400)
//       .json({ success: false, message: "id, menuname, price required" });
//   }
//   try {
//     const sql =
//       "UPDATE testdb.masterorder SET ordername = ?, price = ? WHERE id = ?";
//     const [results] = await db.query(sql, [menuname, price, id]);
//     if (results.affectedRows > 0) {
//       res.json({ success: true, message: "Update menu successfully" });
//     } else {
//       res.status(404).json({ success: false, message: "Menu not found" });
//     }
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

//---
///////////////////////////TiDB data base//////////////////////////////
app.delete("/api/deletemenu/:id", async (req, res) => {
  const { id } = req.params;
  if (!id) {
    return res.status(400).json({ success: false, message: "id required" });
  }
  try {
    const sql = "DELETE FROM test.masterorder WHERE id = ?";
    const [results] = await db.query(sql, [id]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Delete order successfully" });
    } else {
      res.status(404).json({ success: false, message: "Order not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

///////////////////////local host/////////////////////////////
// app.delete("/api/deletemenu/:id", async (req, res) => {
//   const { id } = req.params;
//   if (!id) {
//     return res.status(400).json({ success: false, message: "id required" });
//   }
//   try {
//     const sql = "DELETE FROM testdb.masterorder WHERE id = ?";
//     const [results] = await db.query(sql, [id]);
//     if (results.affectedRows > 0) {
//       res.json({ success: true, message: "Delete order successfully" });
//     } else {
//       res.status(404).json({ success: false, message: "Order not found" });
//     }
//   } catch (err) {
//     console.error("‚ùå Query error:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

// ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£" (Pending Count)
///////////////////////////////TiDB data base///////////////////////////////
app.post("/api/getPendingOrderCount", async (req, res) => {
  try {
    const sql =
      "SELECT COUNT(*) AS pending_count FROM test.listorder WHERE status = 'pending';";
    const [results] = await db.query(sql);
    const pendingCount = results.length > 0 ? results[0].pending_count : 0;
    res.json({ success: true, pendingCount: pendingCount });
  } catch (err) {
    console.error("‚ùå Error fetching pending count:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

///////////////////////local host/////////////////////////////////
// app.post("/api/getPendingOrderCount", async (req, res) => {
//   try {
//     const sql =
//       "SELECT COUNT(*) AS pending_count FROM testdb.listorder WHERE status = 'pending';";
//     const [results] = await db.query(sql);
//     const pendingCount = results.length > 0 ? results[0].pending_count : 0;
//     res.json({ success: true, pendingCount: pendingCount });
//   } catch (err) {
//     console.error("‚ùå Error fetching pending count:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

// ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Total Sales & Today's Orders)
///////////////////////TiDB data base////////////////////////
app.post("/api/getSalesSummary", async (req, res) => {
  try {
    // 1. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏• (Total Sales)
    const sqlTotalSales = `
            SELECT SUM(total_price) AS total_sales
            FROM test.listorder
            WHERE status = 'completed';
        `;

    // 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Today's Order Count)
    const sqlTodayOrdersCount = `
            SELECT COUNT(id) AS today_orders_count
            FROM test.listorder
            WHERE status = 'completed'
            AND DATE(update_status) = CURDATE();
        `;

    // 3. **‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Today's Sales Amount)**
    const sqlTodaySalesAmount = `
            SELECT SUM(total_price) AS today_sales_amount
            FROM test.listorder
            WHERE status = 'completed'
            AND DATE(update_status) = CURDATE();
        `;

    const [totalResults] = await db.query(sqlTotalSales);
    const [todayCountResults] = await db.query(sqlTodayOrdersCount);
    const [todayAmountResults] = await db.query(sqlTodaySalesAmount); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

    const totalSales =
      totalResults.length > 0 && totalResults[0].total_sales !== null
        ? totalResults[0].total_sales
        : 0;
    const todayOrders =
      todayCountResults.length > 0
        ? todayCountResults[0].today_orders_count
        : 0;
    // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    const todaySalesAmount =
      todayAmountResults.length > 0 &&
      todayAmountResults[0].today_sales_amount !== null
        ? todayAmountResults[0].today_sales_amount
        : 0;

    res.json({
      success: true,
      totalSales: totalSales,
      todayOrders: todayOrders,
      todaySalesAmount: todaySalesAmount, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    });
  } catch (err) {
    console.error("‚ùå Error fetching sales summary:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

///////////////////////local host///////////////////////////
// app.post("/api/getSalesSummary", async (req, res) => {
//   try {
//     // 1. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏• (Total Sales)
//     const sqlTotalSales = `
//             SELECT SUM(total_price) AS total_sales
//             FROM testdb.listorder
//             WHERE status = 'completed';
//         `;

//     // 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Today's Order Count)
//     const sqlTodayOrdersCount = `
//             SELECT COUNT(id) AS today_orders_count
//             FROM testdb.listorder
//             WHERE status = 'completed'
//             AND DATE(update_status) = CURDATE();
//         `;

//     // 3. **‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Today's Sales Amount)**
//     const sqlTodaySalesAmount = `
//             SELECT SUM(total_price) AS today_sales_amount
//             FROM testdb.listorder
//             WHERE status = 'completed'
//             AND DATE(update_status) = CURDATE();
//         `;

//     const [totalResults] = await db.query(sqlTotalSales);
//     const [todayCountResults] = await db.query(sqlTodayOrdersCount);
//     const [todayAmountResults] = await db.query(sqlTodaySalesAmount); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

//     const totalSales =
//       totalResults.length > 0 && totalResults[0].total_sales !== null
//         ? totalResults[0].total_sales
//         : 0;
//     const todayOrders =
//       todayCountResults.length > 0
//         ? todayCountResults[0].today_orders_count
//         : 0;
//     // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
//     const todaySalesAmount =
//       todayAmountResults.length > 0 &&
//       todayAmountResults[0].today_sales_amount !== null
//         ? todayAmountResults[0].today_sales_amount
//         : 0;

//     res.json({
//       success: true,
//       totalSales: totalSales,
//       todayOrders: todayOrders,
//       todaySalesAmount: todaySalesAmount, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
//     });
//   } catch (err) {
//     console.error("‚ùå Error fetching sales summary:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
////////////////////TiDB data base///////////////////
app.post("/api/getDailySales", async (req, res) => {
  try {
    // üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á (‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å)
    const sql = `
        SELECT 
            DATE_FORMAT(update_status, '%Y-%m-%d') AS day, 
            SUM(total_price) AS sales,
            NULL AS day_order 
        FROM test.listorder 
        WHERE 
            status = 'completed'
        GROUP BY day
        ORDER BY day; 
    `;

    const [results] = await db.query(sql);

    // ‚ùå ‡∏•‡∏ö Logic ‡∏Å‡∏≤‡∏£ map ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏¥‡πâ‡∏á
    // Frontend ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å update_at ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß
    const salesData = results.map((row) => ({
      // ‡πÉ‡∏ä‡πâ update_at ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å SQL
      update_at: row.day,
      sales: parseFloat(row.sales),
    }));

    res.json({ success: true, salesData: salesData });
  } catch (err) {
    console.error("‚ùå Error fetching daily sales data:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

///////////////////local host///////////////////
// app.post("/api/getDailySales", async (req, res) => {
//   try {
//     // üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á (‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å)
//     const sql = `
//         SELECT
//             DATE_FORMAT(update_status, '%Y-%m-%d') AS day,
//             SUM(total_price) AS sales,
//             NULL AS day_order
//         FROM testdb.listorder
//         WHERE
//             status = 'completed'
//         GROUP BY day
//         ORDER BY day;
//     `;

//     const [results] = await db.query(sql);

//     // ‚ùå ‡∏•‡∏ö Logic ‡∏Å‡∏≤‡∏£ map ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏¥‡πâ‡∏á
//     // Frontend ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å update_at ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß
//     const salesData = results.map((row) => ({
//       // ‡πÉ‡∏ä‡πâ update_at ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å SQL
//       update_at: row.day,
//       sales: parseFloat(row.sales),
//     }));

//     res.json({ success: true, salesData: salesData });
//   } catch (err) {
//     console.error("‚ùå Error fetching daily sales data:", err);
//     res.status(500).json({ success: false, message: "Database error" });
//   }
// });

///////////////////TiDB data base////////////////////
app.get("/api/guestOrders", async (req, res) => {
  // 1. ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å Query Parameter
  const tablenum = req.query.tablenum;

  if (!tablenum) {
    return res
      .status(400)
      .json({ success: false, message: "Table number is missing." });
  }

  try {
    const sql =
      "SELECT * FROM test.listorder WHERE tablenum = ? AND status != 'completed' ORDER BY create_at DESC";

    // db.query ‡∏Ñ‡∏∑‡∏≠ function ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [results] = await db.query(sql, [tablenum]);

    res.json({ success: true, data: results });
  } catch (err) {
    console.error("‚ùå Guest Order Query Error:", err);
    // ‡∏™‡πà‡∏á HTTP 500 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    res.status(500).json({
      success: false,
      message: "Internal Server Error during data retrieval.",
    });
  }
});

/////////////////////////local host///////////////////////////
// app.get("/api/guestOrders", async (req, res) => {
//   // 1. ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å Query Parameter
//   const tablenum = req.query.tablenum;
//   if (!tablenum) {
//     return res
//       .status(400)
//       .json({ success: false, message: "Table number is missing." });
//   }
//   try {
//     const sql =
//       "SELECT * FROM testdb.listorder WHERE tablenum = ? AND status != 'completed' ORDER BY create_at DESC";

//     // db.query ‡∏Ñ‡∏∑‡∏≠ function ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
//     const [results] = await db.query(sql, [tablenum]);

//     res.json({ success: true, data: results });
//   } catch (err) {
//     console.error("‚ùå Guest Order Query Error:", err);
//     // ‡∏™‡πà‡∏á HTTP 500 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
//     res.status(500).json({
//       success: false,
//       message: "Internal Server Error during data retrieval.",
//     });
//   }
// });

app.patch("/api/completeTableOrders", async (req, res) => {
  const { tablenum } = req.body;
  if (!tablenum) {
    return res.status(400).json({
      success: false,
      message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏¢‡∏≠‡∏î",
    });
  }
  try {
    const updateQuery = `
            UPDATE listorder
            SET 
                status = 'completed',
                update_status = CURRENT_TIMESTAMP() 
            WHERE 
                tablenum = ? 
                AND status != 'completed';
        `;

    //‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ db.execute ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mysql2/promise ‡∏´‡∏£‡∏∑‡∏≠ client.query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pg
    const [result] = await db.execute(updateQuery, [tablenum]);

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (result.affectedRows === 0) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
      return res.status(200).json({
        success: false,
        message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà ${tablenum}`,
      });
    }

    // 4. ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Frontend
    res.json({
      success: true,
      message: `‡∏õ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${result.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${tablenum} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`,
    });
  } catch (error) {
    console.error("Error completing table orders:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Server ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏¢‡∏≠‡∏î",
      error: error.message,
    });
  }
});
