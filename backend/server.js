const express = require("express");
const mysql = require("mysql2/promise"); // ‡πÉ‡∏ä‡πâ mysql2/promise
const cors = require("cors");
const bodyParser = require("body-parser");
const bcrypt = require("bcrypt");
const saltRounds = 10;

const app = express();
const PORT = 3001;

// URL ‡∏Ç‡∏≠‡∏á Frontend (Production Domain ‡∏à‡∏≤‡∏Å Vercel)
const allowedOrigin = "https://my-react-order-system-app.vercel.app"; // <--- Domain ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

const corsOptions = {
  origin: allowedOrigin,
  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Credentials (‡πÄ‡∏ä‡πà‡∏ô Cookies, Authorization Headers) ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Login/JWT
  credentials: true,
};

app.use(cors(corsOptions));
app.use(bodyParser.json());

// Database connection using async/await
// const db = mysql.createPool({
//   // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô pool ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
//   host: "localhost",
//   user: "root",
//   password: "root",
//   database: "testdb",
// });

const db = mysql.createPool({
  host: process.env.DB_HOST, // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DB_HOST ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Railway
  user: process.env.DB_USER, // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DB_USER
  password: process.env.DB_PASSWORD, // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DB_PASSWORD
  database: process.env.DB_DATABASE, // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DB_DATABASE
});

// Start the server only after a successful database connection
(async function startServer() {
  try {
    await db.getConnection(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    console.log("‚úÖ Connected to MySQL");
    app.listen(PORT, () => {
      console.log(`üöÄ Server running at http://localhost:${PORT}`);
    });
  } catch (err) {
    console.error("‚ùå Database connection failed:", err);
  }
})();

//---

// POST /login route (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ async/await ‡πÅ‡∏•‡∏∞ bcrypt)
app.post("/api/login", async (req, res) => {
  const { name, password } = req.body;

  if (!name || !password) {
    return res
      .status(400)
      .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
  }

  try {
    const sql = "SELECT * FROM testdb.user WHERE name = ?";
    const [results] = await db.query(sql, [name]);

    if (results.length > 0) {
      const user = results[0];
      // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß
      const isMatch = await bcrypt.compare(password, user.password);

      if (isMatch) {
        // ‡∏™‡πà‡∏á role ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô response
        res.json({
          success: true,
          message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          role: user.role,
          user: user,
        });
      } else {
        res.status(401).json({
          success: false,
          message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        });
      }
    } else {
      res
        .status(401)
        .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
  } catch (err) {
    console.error("‚ùå Login error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.post("/api/getuser", async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á)
    const sql = "SELECT * FROM testdb.user ORDER BY id DESC";
    const [results] = await db.query(sql);

    // *** ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
    res.json({
      success: true,
      users: results, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏µ‡∏¢‡πå 'users'
    });
  } catch (err) {
    console.error("‚ùå Get user list error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

app.patch("/api/updateProfileByAdmin/:name", async (req, res) => {
  const oldName = req.params.name;
  const { newName, newPassword, newRole } = req.body;

  if (!newName && !newPassword && !newRole) {
    return res
      .status(400)
      .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
  }

  try {
    const updates = [];
    const params = [];

    // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (newName && newName !== oldName) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const checkSql = "SELECT name FROM testdb.user WHERE name = ?";
      const [existingUsers] = await db.query(checkSql, [newName]);
      if (existingUsers.length > 0) {
        return res
          .status(409)
          .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
      }
      updates.push("name = ?");
      params.push(newName);
    }

    // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà)
    if (newPassword) {
      if (newPassword.length < 6) {
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        return res.status(400).json({
          success: false,
          message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
        });
      }
      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ bcrypt
      const hashedPassword = await bcrypt.hash(newPassword, saltRounds);
      updates.push("password = ?");
      params.push(hashedPassword);
    }

    // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    if (newRole) {
      if (newRole !== "admin" && newRole !== "user") {
        return res
          .status(400)
          .json({ success: false, message: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
      updates.push("role = ?");
      params.push(newRole);
    }

    // ‡∏£‡∏ß‡∏° SQL Query ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const sql = `UPDATE testdb.user SET ${updates.join(", ")} WHERE name = ?`;

    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° (oldName) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï name = ? ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô params ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    params.push(oldName);

    const [results] = await db.query(sql, params);

    if (results.affectedRows > 0) {
      res.json({ success: true, message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } else {
      res
        .status(404)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
    }
  } catch (error) {
    console.error("‚ùå Admin update profile error:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
  }
});

app.delete("/api/deleteuser/:id", async (req, res) => {
  const { id } = req.params;

  try {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ session ‡∏´‡∏£‡∏∑‡∏≠ token ‡∏Ç‡∏≠‡∏á admin)
    // if (req.user.id == id) {
    //     return res.status(403).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    // }

    const sql = "DELETE FROM testdb.user WHERE id = ?";
    const [results] = await db.query(sql, [id]);

    if (results.affectedRows > 0) {
      res.json({ success: true, message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } else {
      res
        .status(404)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID ‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }
  } catch (error) {
    console.error("‚ùå Delete user error:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
  }
});

//---

// POST /api/register (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
app.post("/api/register", async (req, res) => {
  const { name, password, role } = req.body;

  if (!name || !password || !role) {
    return res.status(400).json({
      success: false,
      message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏",
    });
  }

  try {
    const checkSql = "SELECT name FROM testdb.user WHERE name = ?";
    const [existingUsers] = await db.query(checkSql, [name]);

    if (existingUsers.length > 0) {
      return res
        .status(409)
        .json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const hashedPassword = await bcrypt.hash(password, saltRounds);

    const insertSql =
      "INSERT INTO testdb.user (name, password, role) VALUES (?, ?, ?)";
    await db.query(insertSql, [name, hashedPassword, role]);

    res.json({
      success: true,
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
    });
  } catch (error) {
    console.error("‚ùå Registration error:", error);
    return res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

// ‡∏™‡πà‡∏ß‡∏ô API ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å db.query(...) ‡πÄ‡∏õ‡πá‡∏ô await db.query(...) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

app.post("/api/order", async (req, res) => {
  const { tablenum, listorder, qty, price, total_price } = req.body;
  if (!tablenum || !listorder || !qty) {
    return res.status(400).json({
      success: false,
      message: "tableNumber, listOrder, qty required",
    });
  }
  try {
    const sql =
      "INSERT INTO testdb.listorder (tablenum, listorder, qty, price, total_price, status) VALUES (?, ?, ?, ?, ?, 'pending')";
    const [results] = await db.query(sql, [
      tablenum,
      listorder,
      qty,
      price,
      total_price,
    ]);
    res.json({
      success: true,
      message: "Order added successfully",
      orderId: results.insertId,
    });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.patch("/api/completeOrder", async (req, res) => {
  const { id } = req.body;

  try {
    const sql = `
            UPDATE listorder 
            SET status = 'completed', update_status = CURRENT_TIMESTAMP() 
            WHERE id = ?;
        `;
    const [result] = await db.query(sql, [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
      });
    }

    res.json({ success: true, message: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå Error completing order:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.post("/api/getorder", async (req, res) => {
  try {
    const sql = "SELECT * FROM testdb.listorder ORDER BY id DESC LIMIT 1000";
    const [results] = await db.query(sql);
    res.json({ success: true, orders: results });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.patch("/api/updateOrder", async (req, res) => {
  const { id, tablenum, listorder, qty, price, total_price } = req.body;
  if (!id || !tablenum || !listorder || !qty) {
    return res.status(400).json({
      success: false,
      message: "id, tableNumber, listOrder, qty required",
    });
  }
  try {
    const sql =
      "UPDATE testdb.listorder SET tablenum = ?, listorder = ?, qty = ?, price = ?, total_price = ? WHERE id = ?";
    const [results] = await db.query(sql, [
      tablenum,
      listorder,
      qty,
      price,
      total_price,
      id,
    ]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Update order successfully" });
    } else {
      res.status(404).json({ success: false, message: "Order not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.delete("/api/deleteOrder/:id", async (req, res) => {
  const { id } = req.params;
  if (!id) {
    return res.status(400).json({ success: false, message: "id required" });
  }
  try {
    const sql = "DELETE FROM testdb.listorder WHERE id = ?";
    const [results] = await db.query(sql, [id]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Delete order successfully" });
    } else {
      res.status(404).json({ success: false, message: "Order not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.post("/api/getmenu", async (req, res) => {
  try {
    const sql = "SELECT * FROM testdb.masterorder ORDER BY id DESC LIMIT 1000";
    const [results] = await db.query(sql);
    res.json({ success: true, menu: results });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.post("/api/addmenu", async (req, res) => {
  const { menuname, price } = req.body;
  if (!menuname || !price) {
    return res
      .status(400)
      .json({ success: false, message: "menuname, price required" });
  }
  try {
    const sql =
      "INSERT INTO testdb.masterorder (ordername, price) VALUES (?, ?)";
    const [results] = await db.query(sql, [menuname, price]);
    res.json({
      success: true,
      message: "Menu added successfully",
      orderId: results.insertId,
    });
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.patch("/api/updatemenu", async (req, res) => {
  const { id, menuname, price } = req.body;
  if (!id || !menuname || !price) {
    return res
      .status(400)
      .json({ success: false, message: "id, menuname, price required" });
  }
  try {
    const sql =
      "UPDATE testdb.masterorder SET ordername = ?, price = ? WHERE id = ?";
    const [results] = await db.query(sql, [menuname, price, id]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Update menu successfully" });
    } else {
      res.status(404).json({ success: false, message: "Menu not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

//---

app.delete("/api/deletemenu/:id", async (req, res) => {
  const { id } = req.params;
  if (!id) {
    return res.status(400).json({ success: false, message: "id required" });
  }
  try {
    const sql = "DELETE FROM testdb.masterorder WHERE id = ?";
    const [results] = await db.query(sql, [id]);
    if (results.affectedRows > 0) {
      res.json({ success: true, message: "Delete order successfully" });
    } else {
      res.status(404).json({ success: false, message: "Order not found" });
    }
  } catch (err) {
    console.error("‚ùå Query error:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

// ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£" (Pending Count)
app.post("/api/getPendingOrderCount", async (req, res) => {
  try {
    const sql =
      "SELECT COUNT(*) AS pending_count FROM testdb.listorder WHERE status = 'pending';";
    const [results] = await db.query(sql);
    const pendingCount = results.length > 0 ? results[0].pending_count : 0;
    res.json({ success: true, pendingCount: pendingCount });
  } catch (err) {
    console.error("‚ùå Error fetching pending count:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

// ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Total Sales & Today's Orders)
app.post("/api/getSalesSummary", async (req, res) => {
  try {
    // 1. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏• (Total Sales)
    const sqlTotalSales = `
            SELECT SUM(total_price) AS total_sales
            FROM testdb.listorder 
            WHERE status = 'completed';
        `;

    // 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Today's Order Count)
    const sqlTodayOrdersCount = `
            SELECT COUNT(id) AS today_orders_count
            FROM testdb.listorder
            WHERE status = 'completed' 
            AND DATE(update_status) = CURDATE();
        `;

    // 3. **‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Today's Sales Amount)**
    const sqlTodaySalesAmount = `
            SELECT SUM(total_price) AS today_sales_amount
            FROM testdb.listorder 
            WHERE status = 'completed'
            AND DATE(update_status) = CURDATE();
        `;

    const [totalResults] = await db.query(sqlTotalSales);
    const [todayCountResults] = await db.query(sqlTodayOrdersCount);
    const [todayAmountResults] = await db.query(sqlTodaySalesAmount); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

    const totalSales =
      totalResults.length > 0 && totalResults[0].total_sales !== null
        ? totalResults[0].total_sales
        : 0;
    const todayOrders =
      todayCountResults.length > 0
        ? todayCountResults[0].today_orders_count
        : 0;
    // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    const todaySalesAmount =
      todayAmountResults.length > 0 &&
      todayAmountResults[0].today_sales_amount !== null
        ? todayAmountResults[0].today_sales_amount
        : 0;

    res.json({
      success: true,
      totalSales: totalSales,
      todayOrders: todayOrders,
      todaySalesAmount: todaySalesAmount, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    });
  } catch (err) {
    console.error("‚ùå Error fetching sales summary:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
app.post("/api/getDailySales", async (req, res) => {
  try {
    const sql = `
            SELECT 
                CASE DAYOFWEEK(update_status)
                    WHEN 1 THEN 'Sun'
                    WHEN 2 THEN 'Mon'
                    WHEN 3 THEN 'Tue'
                    WHEN 4 THEN 'Wed'
                    WHEN 5 THEN 'Thu'
                    WHEN 6 THEN 'Fri'
                    WHEN 7 THEN 'Sat'
                END AS day,
                SUM(total_price) AS sales,
                DAYOFWEEK(update_status) AS day_order
            FROM testdb.listorder 
            WHERE status = 'completed' 
            GROUP BY day, day_order
            ORDER BY day_order;
        `;

    const [results] = await db.query(sql);

    // Map ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏µ 7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    const fullSalesData = daysOfWeek.map((dayName) => {
      const dataRow = results.find((row) => row.day === dayName);
      return {
        day: dayName,
        sales: dataRow ? parseFloat(dataRow.sales) : 0,
      };
    });

    res.json({ success: true, salesData: fullSalesData });
  } catch (err) {
    console.error("‚ùå Error fetching daily sales data:", err);
    res.status(500).json({ success: false, message: "Database error" });
  }
});
