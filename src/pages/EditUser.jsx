import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Swal from "sweetalert2";
import axios from "axios";
import Select from "react-select";
import "../App.css";

export default function EditUserpage() {
  const [users, setUsers] = useState([]);
  const [editingUser, setEditingUser] = useState(null);
  const [editName, setEditName] = useState("");
  const [editPassword, setEditPassword] = useState("");
  const [editRole, setEditRole] = useState(null);

  const roleOptions = [
    { value: "user", label: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" },
    { value: "admin", label: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö" },
  ];

  const getuser = async () => {
    // ... (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getuser ‡πÄ‡∏î‡∏¥‡∏°)
    try {
      const res = await axios.post("http://localhost:3001/api/getuser");
      if (res.data.success && Array.isArray(res.data.users)) {
        setUsers(res.data.users);
      } else {
        console.warn("Backend response success but no user array:", res.data);
        setUsers([]);
      }
    } catch (error) {
      console.error("Error fetching user:", error);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ",
      });
    }
  };

  useEffect(() => {
    getuser();
  }, []);

  // ------------------------------------
  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Modal ---
  // ------------------------------------

  const closeEditModal = () => {
    // 1. ‡∏ã‡πà‡∏≠‡∏ô Modal ‡∏ú‡πà‡∏≤‡∏ô Bootstrap JS
    const modalElement = document.getElementById("editUserModal");
    const modalInstance = window.bootstrap.Modal.getInstance(modalElement);
    if (modalInstance) {
      modalInstance.hide();
    }
    // 2. ‡∏•‡πâ‡∏≤‡∏á State ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Modal Logic
    setEditingUser(null);
  };

  // 1. ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const handleEdit = (user) => {
    setEditingUser(user);
    setEditName(user.name);
    setEditPassword("");
    const currentRole = roleOptions.find((opt) => opt.value === user.role);
    setEditRole(currentRole || null);

    // 3. ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏ú‡πà‡∏≤‡∏ô Bootstrap JS
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ React State ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô Bootstrap JS ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    setTimeout(() => {
      const modalElement = document.getElementById("editUserModal");
      // ‡∏ñ‡πâ‡∏≤ Modal ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getInstance
      let modalInstance = window.bootstrap.Modal.getInstance(modalElement);
      if (!modalInstance) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        modalInstance = new window.bootstrap.Modal(modalElement);
      }
      modalInstance.show();
    }, 100);
  };

  // 2. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
  const handleUpdate = async (e) => {
    e.preventDefault();
    if (!editingUser) return;

    if (!editName && !editPassword && !editRole) {
      return Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà",
      });
    }

    const oldName = editingUser.name;

    try {
      const response = await axios.patch(
        `http://localhost:3001/api/updateProfileByAdmin/${oldName}`,
        {
          newName: editName,
          newPassword: editPassword,
          newRole: editRole ? editRole.value : undefined,
        }
      );

      if (response.data.success) {
        Swal.fire("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", response.data.message, "success");
        closeEditModal(); // ‡∏õ‡∏¥‡∏î Modal
        getuser(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
      } else {
        Swal.fire("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", response.data.message, "error");
      }
    } catch (error) {
      Swal.fire(
        "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        error.response?.data?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡πÑ‡∏î‡πâ",
        "error"
      );
    }
  };

  // ----------------------------------
  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
  // ----------------------------------
  const handleDelete = async (id, name) => {
    // ... (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleDelete ‡πÄ‡∏î‡∏¥‡∏°)
    Swal.fire({
      title: `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${name} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      text: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const res = await axios.delete(
            `http://localhost:3001/api/deleteuser/${id}`
          );
          if (res.data.success) {
            Swal.fire("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", res.data.message, "success");
            getuser();
          } else {
            Swal.fire("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", res.data.message, "error");
          }
        } catch (error) {
          Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡πÑ‡∏î‡πâ", "error");
        }
      }
    });
  };

  // ----------------------------------
  // --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Return JSX) ---
  // ----------------------------------

  return (
    <div className="container-fluid">
      {/* ... ‡∏™‡πà‡∏ß‡∏ô Breadcrumb ‡πÅ‡∏•‡∏∞ Header ... */}
      <nav
        aria-label="breadcrumb"
        style={{ fontSize: "18px", fontFamily: "'Kanit', sans-serif" }}
      >
        <ol className="breadcrumb bg-light p-3 rounded shadow-sm">
          <li className="breadcrumb-item">
            <Link to="/">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link>
          </li>
          <li className="breadcrumb-item active" aria-current="page">
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          </li>
        </ol>
      </nav>

      <h1
        className="header-title"
        style={{
          background: "linear-gradient(90deg, #0d1b2a, #1b4332)",
          WebkitBackgroundClip: "text",
          WebkitTextFillColor: "transparent",
          fontFamily: "'Kanit', sans-serif",
          letterSpacing: "0.5px",
        }}
      >
        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      </h1>

      {/* ... ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ... */}
      <div className="card shadow">
        <div
          className="card-body"
          style={{ fontFamily: "'Kanit', sans-serif" }}
        >
          <div className="table-container">
            <table
              className="table table-bordered table-striped"
              style={{ fontSize: "20px" }}
            >
              <thead className="table">
                <tr>
                  {/* <th>ID</th> */}
                  <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                  <th>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</th>
                  <th>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</th>
                  {/* (Hash) */}
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {users.length > 0 ? (
                  users.map((val) => (
                    <tr key={val.id}>
                      {/* <td>{val.id}</td> */}
                      <td>{val.name}</td>
                      <td>
                        {val.role === "admin" ? "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö" : "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"}
                      </td>
                      <td
                        style={{
                          fontSize: "14px",
                          maxWidth: "200px",
                          overflowWrap: "break-word",
                        }}
                      >
                        {val.password}
                      </td>
                      <td>
                        <div className="d-flex gap-2">
                          <button
                            className="btn btn-primary flex-fill"
                            onClick={() => handleEdit(val)}
                          >
                            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </button>
                          <button
                            className="btn btn-danger flex-fill"
                            onClick={() => handleDelete(val.id, val.name)}
                          >
                            üóëÔ∏è ‡∏•‡∏ö
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="5" className="text-center">
                      ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* ------------------------------------ */}
      {/* *** MODAL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ *** */}
      {/* ------------------------------------ */}
      <div
        // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ 'fade' ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤ Bootstrap CSS/JS ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Transition
        className="modal"
        id="editUserModal"
        tabIndex="-1"
        aria-labelledby="editUserModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header bg-primary text-white">
              {" "}
              {/* <--- ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ß Modal ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô (Primary) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß (White) */}
              <h5
                className="modal-title"
                id="editUserModalLabel"
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° Style ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                style={{ fontWeight: "600" }}
              >
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {editingUser ? editingUser.name : ""}
              </h5>
              <button
                type="button"
                className="btn-close btn-close-white" // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏° btn-close-white ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°
                data-bs-dismiss="modal"
                aria-label="Close"
                onClick={closeEditModal}
              ></button>
            </div>
            <form onSubmit={handleUpdate}>
              <div
                className="modal-body"
                style={{ fontFamily: "'Kanit', sans-serif" }}
              >
                <div className="mb-3">
                  <label className="form-label text-dark fw-bold">
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
                  </label>{" "}
                  {/* <--- ‡πÄ‡∏ô‡πâ‡∏ô label */}
                  <input
                    type="text"
                    className="form-control"
                    value={editName}
                    onChange={(e) => setEditName(e.target.value.toUpperCase())}
                    placeholder="‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label text-dark fw-bold">
                    ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
                  </label>{" "}
                  {/* <--- ‡πÄ‡∏ô‡πâ‡∏ô label */}
                  <input
                    type="password"
                    className="form-control"
                    value={editPassword}
                    onChange={(e) => setEditPassword(e.target.value)}
                    placeholder="‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label text-dark fw-bold">
                    ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà
                  </label>{" "}
                  {/* <--- ‡πÄ‡∏ô‡πâ‡∏ô label */}
                  <Select
                    options={roleOptions}
                    value={editRole}
                    onChange={setEditRole}
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
                  />
                </div>
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-outline-secondary" // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Outline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏á
                  data-bs-dismiss="modal"
                  onClick={closeEditModal}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button type="submit" className="btn btn-success">
                  {" "}
                  {/* <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (Success) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô */}
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      {/* ------------------------------------ */}
    </div>
  );
}
